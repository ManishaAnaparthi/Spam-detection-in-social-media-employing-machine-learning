# -*- coding: utf-8 -*-
"""Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12e2-R3y_3fZRdO-hykwdqlUax1jtk1CO
"""

from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix
import numpy as np
from sklearn import model_selection
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer

print("Youtube Spam Classification")

df = pd.read_csv('/content/Youtube02-KatyPerry(DATASET).csv')
df.head()

#train-test split
train_x, test_x, train_y, test_y = model_selection.train_test_split(df['CONTENT'], df['CLASS'], test_size=0.33, random_state=42)

from sklearn.naive_bayes import MultinomialNB

from sklearn.pipeline import Pipeline
text_clf_nb = Pipeline([('vect', CountVectorizer()),
                      ('tfidf', TfidfTransformer()),
                      ('clf', MultinomialNB()),
 ])

text_clf_nb = text_clf_nb.fit(train_x, train_y)
predicted = text_clf_nb.predict(test_x)
print("\n\nNaive Bayes->Accuracy:",accuracy_score(predicted, test_y))
print("F1_score ",f1_score(test_y, predicted, average="macro"))
print("Precision ",precision_score(test_y, predicted, average="macro"))
print("Recall ",recall_score(test_y, predicted, average="macro"))

from sklearn.ensemble import BaggingClassifier

from sklearn.pipeline import Pipeline
text_clf_bag = Pipeline([('vect', CountVectorizer()),
                      ('tfidf', TfidfTransformer()),
                      ('clf', BaggingClassifier()),
 ])

text_clf_bag = text_clf_bag.fit(train_x, train_y)
predicted = text_clf_bag.predict(test_x)
print("\n\nBagging->Accuracy:",accuracy_score(predicted, test_y))
print("F1_score ",f1_score(test_y, predicted, average="macro"))
print("Precision ",precision_score(test_y, predicted, average="macro"))
print("Recall ",recall_score(test_y, predicted, average="macro"))

from sklearn.linear_model import SGDClassifier
text_clf_svm = Pipeline([('vect', CountVectorizer()),
                      ('tfidf', TfidfTransformer()),
                      ('clf-svm', SGDClassifier(loss='hinge', penalty='l2',
                                            alpha=1e-3, random_state=42)),
])

text_clf_svm = text_clf_svm.fit(train_x, train_y)
predicted = text_clf_svm.predict(test_x)
print("\n\nSVM->Accuracy:",accuracy_score(predicted, test_y))
print("F1_score ",f1_score(test_y, predicted, average="macro"))
print("Precision ",precision_score(test_y, predicted, average="macro"))
print("Recall ",recall_score(test_y, predicted, average="macro"))

from sklearn.neighbors import KNeighborsClassifier
text_clf_knn = Pipeline([('vect', CountVectorizer()),
                      ('tfidf', TfidfTransformer()),
                      ('clf-ann', KNeighborsClassifier()),
])

text_clf_knn = text_clf_knn.fit(train_x, train_y)
predicted = text_clf_knn.predict(test_x)
print("\n\nKNN->Accuracy:",accuracy_score(predicted, test_y))
print("F1_score ",f1_score(test_y, predicted, average="macro"))
print("Precision ",precision_score(test_y, predicted, average="macro"))
print("Recall ",recall_score(test_y, predicted, average="macro"))